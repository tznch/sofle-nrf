/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  `    |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  ENTER |  | SPACE | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&mt TILDE ESCAPE  &kp N1  &kp N2      &kp N3        &kp N4        &kp N5                                   &kp N6        &kp N7          &kp N8          &kp N9           &kp N0    &mt MINUS BACKSPACE
&kp TAB           &kp Q   &kp W       &kp E         &kp R         &kp T                                    &kp Y         &kp U           &kp I           &kp O            &kp P     &kp LBKT
&kp LSHFT         &kp A   &kp S       &kp D         &kp F         &kp G                                    &kp H         &kp J           &kp K           &kp L            &kp SEMI  &kp SQT
&kp LCTRL         &kp Z   &kp X       &kp C         &kp V         &kp B      &kp C_MUTE  &kp K_PLAY_PAUSE  &kp N         &kp M           &kp COMMA       &kp DOT          &kp FSLH  &kp RBKT
                          &lt 1 CAPS  &kp LEFT_WIN  &kp LEFT_ALT  &kp ENTER  &kp SPACE   &kp SPACE         &kp UP_ARROW  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        lower_layer {
            // TODO: Some binds are waiting for shifted keycode support.
            // ------------------------------------------------------------------------------------------------------------
            // |       |  F1 |  F2 |  F3  |  F4  |  F5  |                   |  F6  |  F7   |  F8   |  F9  |  F10  |  F11  |
            // | `     |   1 |   2 |   3  |   4  |   5  |                   |   6  |   7   |   8   |   9  |    0  |  F12  |
            // |       |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   |   |
            // |       |  =  |  -  |  +   |  {   |  }   |        |  |       |  [   |  ]    |  ;    |  :   |   \   |       |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&trans     &kp F1     &kp F2       &kp F3     &kp F4     &kp F5                            &kp F6     &kp F7    &kp F8           &kp F9           &kp F10   &kp MINUS
&kp GRAVE  &kp N1     &kp N2       &kp N3     &kp N4     &kp N5                            &kp N6     &kp N7    &kp N8           &kp NUMBER_9     &kp N0    &kp F12
&trans     &kp EXCL   &kp AT       &kp HASH   &kp DLLR   &kp PRCNT                         &kp CARET  &kp AMPS  &kp KP_MULTIPLY  &kp LPAR         &kp RPAR  &kp PIPE
&trans     &kp EQUAL  &kp KP_PLUS  &kp MINUS  &kp UNDER  &kp C_PLAY_PAUSE  &trans  &trans  &kp LBKT   &kp RBKT  &kp LEFT_BRACE   &kp RIGHT_BRACE  &kp BSLH  &trans
                      &trans       &trans     &trans     &trans            &trans  &trans  &trans     &trans    &trans           &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>,
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        BT_RGB {
            bindings = <
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_EFF  &trans  &trans  &trans                  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans           &trans           &trans           &trans  &trans  &trans                  &trans      &trans        &trans        &trans        &trans        &trans
&trans           &trans           &trans           &trans  &trans  &trans                  &trans      &trans        &trans        &trans        &trans        &trans
&trans           &trans           &trans           &trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans        &trans        &trans
                                  &trans           &trans  &trans  &trans  &trans  &trans  &trans      &trans        &trans        &trans
            >;
        };
    };
};
